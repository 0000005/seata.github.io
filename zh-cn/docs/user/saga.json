{
  "filename": "saga.md",
  "__html": "<h1>SEATA Saga 模式</h1>\n<h2>概述</h2>\n<p>Saga模式是SEATA提供的长事务解决方案，在Saga模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务都由业务开发实现。</p>\n<p><img src=\"../../../img/saga/sagas.png\" alt=\"Saga模式示意图\"></p>\n<p>理论基础：Hector &amp; Kenneth 发表论⽂ Sagas （1987）</p>\n<h3>适用场景：</h3>\n<ul>\n<li>业务流程长、业务流程多</li>\n<li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li>\n</ul>\n<h3>优势：</h3>\n<ul>\n<li>一阶段提交本地事务，无锁，高性能</li>\n<li>事件驱动架构，参与者可异步执行，高吞吐</li>\n<li>补偿服务易于实现</li>\n</ul>\n<h3>缺点：</h3>\n<ul>\n<li>不保证隔离性（应对方案见后面文档）</li>\n</ul>\n<h3>Saga的实现：</h3>\n<h4>基于状态机引擎的 Saga 实现：</h4>\n<p>目前SEATA提供的Saga模式是基于状态机引擎来实现的，机制是：</p>\n<ol>\n<li>通过状态图来定义服务调用的流程并生成 json 状态语言定义文件</li>\n<li>状态图中一个节点可以是调用一个服务，节点可以配置它的补偿节点</li>\n<li>状态图 json 由状态机引擎驱动执行，当出现异常时状态引擎反向执行已成功节点对应的补偿节点将事务回滚</li>\n</ol>\n<blockquote>\n<p>注意: 异常发生时是否进行补偿也可由用户自定义决定</p>\n</blockquote>\n<ol start=\"4\">\n<li>可以实现服务编排需求，支持单项选择、并发、子流程、参数转换、参数映射、服务执行状态判断、异常捕获等功能</li>\n</ol>\n<p>示例状态图:</p>\n<p><img src=\"../../../img/saga/demo_statelang.png?raw=true\" alt=\"示例状态图\"></p>\n<h2>快速开始</h2>\n<h3>Demo简介</h3>\n<p>基于dubbo构建的微服务下，使用Saga模式演示分布式事务的提交和回滚；</p>\n<p>业务流程图如下图所示：</p>\n<p><img src=\"../../../img/saga/demo_business_process.png?raw=true\" alt=\"demo业务流程图\"></p>\n<p>先下载seata-samples工程：<a href=\"https://github.com/seata/seata-samples.git\">https://github.com/seata/seata-samples.git</a></p>\n<blockquote>\n<p>注意SEATA版本需要0.9.0以上</p>\n</blockquote>\n<p>在dubbo-saga-sample中一个分布式事务内会有2个Saga事务参与者，分别是: <a href=\"https://github.com/seata/seata-samples/blob/master/saga/dubbo-saga-sample/src/main/java/io/seata/samples/saga/action/InventoryAction.java\">InventoryAction</a> 和 <a href=\"https://github.com/seata/seata-samples/blob/master/saga/dubbo-saga-sample/src/main/java/io/seata/samples/saga/action/BalanceAction.java\">BalanceAction</a> ;分布式事务提交则两者均提交，分布式事务回滚则两者均回滚；</p>\n<p>这2个Saga参与者均是 dubbo 服务，两个参与都有一个reduce方法，表示库存扣减或余额扣减，还有一个compensateReduce方法，表示补偿扣减操作。</p>\n<ul>\n<li>InventoryAction 接口定义如下：</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">InventoryAction</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * reduce\n     * <span class=\"hljs-doctag\">@param</span> businessKey\n     * <span class=\"hljs-doctag\">@param</span> amount\n     * <span class=\"hljs-doctag\">@param</span> params\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">reduce</span><span class=\"hljs-params\">(String businessKey, BigDecimal amount, Map&lt;String, Object&gt; params)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * compensateReduce\n     * <span class=\"hljs-doctag\">@param</span> businessKey\n     * <span class=\"hljs-doctag\">@param</span> params\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">compensateReduce</span><span class=\"hljs-params\">(String businessKey, Map&lt;String, Object&gt; params)</span></span>;\n}\n</code></pre>\n<ul>\n<li>这个场景用状态语言定义就是下面的json：src/main/resources/statelang/reduce_inventory_and_balance.json</li>\n</ul>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">\"Name\"</span>: <span class=\"hljs-string\">\"reduceInventoryAndBalance\"</span>,\n    <span class=\"hljs-attr\">\"Comment\"</span>: <span class=\"hljs-string\">\"reduce inventory then reduce balance in a transaction\"</span>,\n    <span class=\"hljs-attr\">\"StartState\"</span>: <span class=\"hljs-string\">\"ReduceInventory\"</span>,\n    <span class=\"hljs-attr\">\"Version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"States\"</span>: {\n        <span class=\"hljs-attr\">\"ReduceInventory\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"inventoryAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"reduce\"</span>,\n            <span class=\"hljs-attr\">\"CompensateState\"</span>: <span class=\"hljs-string\">\"CompensateReduceInventory\"</span>,\n            <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"ChoiceState\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>,\n                <span class=\"hljs-string\">\"$.[count]\"</span>\n            ],\n            <span class=\"hljs-attr\">\"Output\"</span>: {\n                <span class=\"hljs-attr\">\"reduceInventoryResult\"</span>: <span class=\"hljs-string\">\"$.#root\"</span>\n            },\n            <span class=\"hljs-attr\">\"Status\"</span>: {\n                <span class=\"hljs-attr\">\"#root == true\"</span>: <span class=\"hljs-string\">\"SU\"</span>,\n                <span class=\"hljs-attr\">\"#root == false\"</span>: <span class=\"hljs-string\">\"FA\"</span>,\n                <span class=\"hljs-attr\">\"$Exception{java.lang.Throwable}\"</span>: <span class=\"hljs-string\">\"UN\"</span>\n            }\n        },\n        <span class=\"hljs-attr\">\"ChoiceState\"</span>:{\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"Choice\"</span>,\n            <span class=\"hljs-attr\">\"Choices\"</span>:[\n                {\n                    <span class=\"hljs-attr\">\"Expression\"</span>:<span class=\"hljs-string\">\"[reduceInventoryResult] == true\"</span>,\n                    <span class=\"hljs-attr\">\"Next\"</span>:<span class=\"hljs-string\">\"ReduceBalance\"</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"Default\"</span>:<span class=\"hljs-string\">\"Fail\"</span>\n        },\n        <span class=\"hljs-attr\">\"ReduceBalance\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"balanceAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"reduce\"</span>,\n            <span class=\"hljs-attr\">\"CompensateState\"</span>: <span class=\"hljs-string\">\"CompensateReduceBalance\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>,\n                <span class=\"hljs-string\">\"$.[amount]\"</span>,\n                {\n                    <span class=\"hljs-attr\">\"throwException\"</span> : <span class=\"hljs-string\">\"$.[mockReduceBalanceFail]\"</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"Output\"</span>: {\n                <span class=\"hljs-attr\">\"compensateReduceBalanceResult\"</span>: <span class=\"hljs-string\">\"$.#root\"</span>\n            },\n            <span class=\"hljs-attr\">\"Status\"</span>: {\n                <span class=\"hljs-attr\">\"#root == true\"</span>: <span class=\"hljs-string\">\"SU\"</span>,\n                <span class=\"hljs-attr\">\"#root == false\"</span>: <span class=\"hljs-string\">\"FA\"</span>,\n                <span class=\"hljs-attr\">\"$Exception{java.lang.Throwable}\"</span>: <span class=\"hljs-string\">\"UN\"</span>\n            },\n            <span class=\"hljs-attr\">\"Catch\"</span>: [\n                {\n                    <span class=\"hljs-attr\">\"Exceptions\"</span>: [\n                        <span class=\"hljs-string\">\"java.lang.Throwable\"</span>\n                    ],\n                    <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"CompensationTrigger\"</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"Succeed\"</span>\n        },\n        <span class=\"hljs-attr\">\"CompensateReduceInventory\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"inventoryAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"compensateReduce\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>\n            ]\n        },\n        <span class=\"hljs-attr\">\"CompensateReduceBalance\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"ServiceTask\"</span>,\n            <span class=\"hljs-attr\">\"ServiceName\"</span>: <span class=\"hljs-string\">\"balanceAction\"</span>,\n            <span class=\"hljs-attr\">\"ServiceMethod\"</span>: <span class=\"hljs-string\">\"compensateReduce\"</span>,\n            <span class=\"hljs-attr\">\"Input\"</span>: [\n                <span class=\"hljs-string\">\"$.[businessKey]\"</span>\n            ]\n        },\n        <span class=\"hljs-attr\">\"CompensationTrigger\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>: <span class=\"hljs-string\">\"CompensationTrigger\"</span>,\n            <span class=\"hljs-attr\">\"Next\"</span>: <span class=\"hljs-string\">\"Fail\"</span>\n        },\n        <span class=\"hljs-attr\">\"Succeed\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>:<span class=\"hljs-string\">\"Succeed\"</span>\n        },\n        <span class=\"hljs-attr\">\"Fail\"</span>: {\n            <span class=\"hljs-attr\">\"Type\"</span>:<span class=\"hljs-string\">\"Fail\"</span>,\n            <span class=\"hljs-attr\">\"ErrorCode\"</span>: <span class=\"hljs-string\">\"PURCHASE_FAILED\"</span>,\n            <span class=\"hljs-attr\">\"Message\"</span>: <span class=\"hljs-string\">\"purchase failed\"</span>\n        }\n    }\n}\n</code></pre>\n<p>该json表示的状态图:</p>\n<p><img src=\"../../../img/saga/demo_statelang.png?raw=true\" alt=\"该json表示的状态图\"></p>\n<p>状态语言在一定程度上参考了<a href=\"https://docs.aws.amazon.com/zh_cn/step-functions/latest/dg/tutorial-creating-lambda-state-machine.html\">AWS Step Functions</a></p>\n<h4>&quot;状态机&quot; 属性简介:</h4>\n<ul>\n<li>Name: 表示状态机的名称，必须唯一</li>\n<li>Comment: 状态机的描述</li>\n<li>Version: 状态机定义版本</li>\n<li>StartState: 启动时运行的第一个&quot;状态&quot;</li>\n<li>States: 状态列表，是一个map结构，key是&quot;状态&quot;的名称，在状态机内必须唯一</li>\n</ul>\n<h4>&quot;状态&quot; 属性简介:</h4>\n<ul>\n<li>Type: &quot;状态&quot; 的类型，比如有:\n<ul>\n<li>ServiceTask: 执行调用服务任务</li>\n<li>Choice: 单条件选择路由</li>\n<li>CompensationTrigger: 触发补偿流程</li>\n<li>Succeed: 状态机正常结束</li>\n<li>Fail: 状态机异常结束</li>\n<li>SubStateMachine: 调用子状态机</li>\n<li>CompensateSubMachine: 用于补偿一个子状态机</li>\n</ul>\n</li>\n<li>ServiceName: 服务名称，通常是服务的beanId</li>\n<li>ServiceMethod: 服务方法名称</li>\n<li>CompensateState: 该&quot;状态&quot;的补偿&quot;状态&quot;</li>\n<li>Input: 调用服务的输入参数列表, 是一个数组, 对应于服务方法的参数列表, $.表示使用表达式从状态机上下文中取参数，表达使用的<a href=\"https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html\">SpringEL</a>, 如果是常量直接写值即可</li>\n<li>Ouput: 将服务返回的参数赋值到状态机上下文中, 是一个map结构，key为放入到状态机上文时的key（状态机上下文也是一个map），value中$.是表示SpringEL表达式，表示从服务的返回参数中取值，#root表示服务的整个返回参数</li>\n<li>Status: 服务执行状态映射，框架定义了三个状态，SU 成功、FA 失败、UN 未知, 我们需要把服务执行的状态映射成这三个状态，帮助框架判断整个事务的一致性，是一个map结构，key是条件表达式，一般是取服务的返回值或抛出的异常进行判断，默认是SpringEL表达式判断服务返回参数，带$Exception{开头表示判断异常类型。value是当这个条件表达式成立时则将服务执行状态映射成这个值</li>\n<li>Catch: 捕获到异常后的路由</li>\n<li>Next: 服务执行完成后下一个执行的&quot;状态&quot;</li>\n<li>Choices: Choice类型的&quot;状态&quot;里, 可选的分支列表, 分支中的Expression为SpringEL表达式, Next为当表达式成立时执行的下一个&quot;状态&quot;</li>\n<li>ErrorCode: Fail类型&quot;状态&quot;的错误码</li>\n<li>Message: Fail类型&quot;状态&quot;的错误信息</li>\n</ul>\n<p>更多详细的状态语言解释请看<a href=\"#State-language-referance\">State language referance</a>章节</p>\n<p>更多详细的状态语言使用示例见<a href=\"https://github.com/seata/seata/tree/develop/test/src/test/java/io/seata/saga/engine\">https://github.com/seata/seata/tree/develop/test/src/test/java/io/seata/saga/engine</a></p>\n<h3>Demo 运行指南</h3>\n<h4>step 1 启动 SEATA Server</h4>\n<p>运行 <a href=\"https://github.com/seata/seata-samples/blob/master/saga/sofarpc-saga-sample/src/test/java/io/seata/samples/saga/SeataServerStarter.java\">SeataServerStarter</a> ，启动 Seata Server；</p>\n<h4>step 2 启动 dubbo provider Demo</h4>\n<p>运行 <a href=\"https://github.com/seata/seata-samples/blob/master/saga/dubbo-saga-sample/src/test/java/io/seata/samples/saga/starter/DubboSagaProviderStarter.java\">DubboSagaProviderStarter</a> ，启动 dubbo provider；</p>\n<h4>step 3 启动 Saga Demo</h4>\n<p>运行 <a href=\"https://github.com/seata/seata-samples/blob/master/saga/dubbo-saga-sample/src/main/java/io/seata/samples/saga/starter/DubboSagaTransactionStarter.java\">DubboSagaTransactionStarter</a> , 启动 demo工程；</p>\n<blockquote>\n<p>Demo中的数据库使用的是H2内存数据库, 生产上建议使用与业务相同的库, 目前支持Oracle, Mysql, DB2. 建表语句在 <a href=\"https://github.com/seata/seata/tree/develop/saga/seata-saga-engine-store/src/main/resources/sql\">https://github.com/seata/seata/tree/develop/saga/seata-saga-engine-store/src/main/resources/sql</a></p>\n</blockquote>\n<blockquote>\n<p>Demo中还有调用本地服务和调用SOFA RPC服务的示例</p>\n</blockquote>\n<h2>最佳实践</h2>\n<h3>Saga 服务设计的实践经验</h3>\n<h4>允许空补偿</h4>\n<ul>\n<li>空补偿：原服务未执行，补偿服务执行了</li>\n<li>出现原因：\n<ul>\n<li>原服务 超时（丢包）</li>\n<li>Saga 事务触发 回滚</li>\n<li>未收到 原服务请求，先收到 补偿请求</li>\n</ul>\n</li>\n</ul>\n<p>所以服务设计时需要允许空补偿, 即没有找到要补偿的业务主键时返回补偿成功并将原业务主键记录下来</p>\n<h4>防悬挂控制</h4>\n<ul>\n<li>悬挂：补偿服务 比 原服务 先执行</li>\n<li>出现原因：\n<ul>\n<li>原服务 超时（拥堵）</li>\n<li>Saga 事务回滚，触发 回滚</li>\n<li>拥堵的 原服务 到达</li>\n</ul>\n</li>\n</ul>\n<p>所以要检查当前业务主键是否已经在空补偿记录下来的业务主键中存在，如果存在则要拒绝服务的执行</p>\n<h4>幂等控制</h4>\n<ul>\n<li>原服务与补偿服务都需要保证幂等性, 由于网络可能超时, 可以设置重试策略，重试发生时要通过幂等控制避免业务数据重复更新</li>\n</ul>\n<h3>缺乏隔离性的应对</h3>\n<ul>\n<li>由于 Saga 事务不保证隔离性, 在极端情况下可能由于脏写无法完成回滚操作, 比如举一个极端的例子, 分布式事务内先给用户A充值, 然后给用户B扣减余额, 如果在给A用户充值成功, 在事务提交以前, A用户把余额消费掉了, 如果事务发生回滚, 这时则没有办法进行补偿了。这就是缺乏隔离性造成的典型的问题, 实践中一般的应对方法是：\n<ul>\n<li>业务流程设计时遵循“宁可长款, 不可短款”的原则, 长款意思是客户少了钱机构多了钱, 以机构信誉可以给客户退款, 反之则是短款, 少的钱可能追不回来了。所以在业务流程设计上一定是先扣款。</li>\n<li>有些业务场景可以允许让业务最终成功, 在回滚不了的情况下可以继续重试完成后面的流程, 所以状态机引擎除了提供“回滚”能力还需要提供“向前”恢复上下文继续执行的能力, 让业务最终执行成功, 达到最终一致性的目的。</li>\n</ul>\n</li>\n</ul>\n<h2>API referance</h2>\n<h4>StateMachineEngine API</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StateMachineEngine</span> </span>{\n\n    <span class=\"hljs-comment\">/**\n     * start a state machine instance\n     * <span class=\"hljs-doctag\">@param</span> stateMachineName\n     * <span class=\"hljs-doctag\">@param</span> tenantId\n     * <span class=\"hljs-doctag\">@param</span> startParams\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">start</span><span class=\"hljs-params\">(String stateMachineName, String tenantId, Map&lt;String, Object&gt; startParams)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * start a state machine instance with businessKey\n     * <span class=\"hljs-doctag\">@param</span> stateMachineName\n     * <span class=\"hljs-doctag\">@param</span> tenantId\n     * <span class=\"hljs-doctag\">@param</span> businessKey\n     * <span class=\"hljs-doctag\">@param</span> startParams\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">startWithBusinessKey</span><span class=\"hljs-params\">(String stateMachineName, String tenantId, String businessKey, Map&lt;String, Object&gt; startParams)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * start a state machine instance asynchronously\n     * <span class=\"hljs-doctag\">@param</span> stateMachineName\n     * <span class=\"hljs-doctag\">@param</span> tenantId\n     * <span class=\"hljs-doctag\">@param</span> startParams\n     * <span class=\"hljs-doctag\">@param</span> callback\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">startAsync</span><span class=\"hljs-params\">(String stateMachineName, String tenantId, Map&lt;String, Object&gt; startParams, AsyncCallback callback)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * start a state machine instance asynchronously with businessKey\n     * <span class=\"hljs-doctag\">@param</span> stateMachineName\n     * <span class=\"hljs-doctag\">@param</span> tenantId\n     * <span class=\"hljs-doctag\">@param</span> businessKey\n     * <span class=\"hljs-doctag\">@param</span> startParams\n     * <span class=\"hljs-doctag\">@param</span> callback\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">startWithBusinessKeyAsync</span><span class=\"hljs-params\">(String stateMachineName, String tenantId, String businessKey, Map&lt;String, Object&gt; startParams, AsyncCallback callback)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * forward restart a failed state machine instance\n     * <span class=\"hljs-doctag\">@param</span> stateMachineInstId\n     * <span class=\"hljs-doctag\">@param</span> replaceParams\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> ForwardInvalidException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">forward</span><span class=\"hljs-params\">(String stateMachineInstId, Map&lt;String, Object&gt; replaceParams)</span> <span class=\"hljs-keyword\">throws</span> ForwardInvalidException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * forward restart a failed state machine instance asynchronously\n     * <span class=\"hljs-doctag\">@param</span> stateMachineInstId\n     * <span class=\"hljs-doctag\">@param</span> replaceParams\n     * <span class=\"hljs-doctag\">@param</span> callback\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> ForwardInvalidException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">forwardAsync</span><span class=\"hljs-params\">(String stateMachineInstId, Map&lt;String, Object&gt; replaceParams, AsyncCallback callback)</span> <span class=\"hljs-keyword\">throws</span> ForwardInvalidException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * compensate a state machine instance\n     * <span class=\"hljs-doctag\">@param</span> stateMachineInstId\n     * <span class=\"hljs-doctag\">@param</span> replaceParams\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">compensate</span><span class=\"hljs-params\">(String stateMachineInstId, Map&lt;String, Object&gt; replaceParams)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * compensate a state machine instance asynchronously\n     * <span class=\"hljs-doctag\">@param</span> stateMachineInstId\n     * <span class=\"hljs-doctag\">@param</span> replaceParams\n     * <span class=\"hljs-doctag\">@param</span> callback\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">compensateAsync</span><span class=\"hljs-params\">(String stateMachineInstId, Map&lt;String, Object&gt; replaceParams, AsyncCallback callback)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * skip current failed state instance and forward restart state machine instance\n     * <span class=\"hljs-doctag\">@param</span> stateMachineInstId\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">skipAndForward</span><span class=\"hljs-params\">(String stateMachineInstId)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * skip current failed state instance and forward restart state machine instance asynchronously\n     * <span class=\"hljs-doctag\">@param</span> stateMachineInstId\n     * <span class=\"hljs-doctag\">@param</span> callback\n     * <span class=\"hljs-doctag\">@return</span>\n     * <span class=\"hljs-doctag\">@throws</span> EngineExecutionException\n     */</span>\n    <span class=\"hljs-function\">StateMachineInstance <span class=\"hljs-title\">skipAndForwardAsync</span><span class=\"hljs-params\">(String stateMachineInstId, AsyncCallback callback)</span> <span class=\"hljs-keyword\">throws</span> EngineExecutionException</span>;\n\n    <span class=\"hljs-comment\">/**\n     * get state machine configurations\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-function\">StateMachineConfig <span class=\"hljs-title\">getStateMachineConfig</span><span class=\"hljs-params\">()</span></span>;\n}\n</code></pre>\n<h4>StateMachineEngine API</h4>\n<h2>Config referance</h2>\n<h4>在Spring Bean配置文件中配置一个StateMachineEngine</h4>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"...\"</span>&gt;</span>\n...\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"stateMachineEngine\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"io.seata.saga.engine.impl.ProcessCtrlStateMachineEngine\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"stateMachineConfig\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dbStateMachineConfig\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dbStateMachineConfig\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"io.seata.saga.engine.config.DbStateMachineConfig\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dataSource\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"resources\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"statelang/*.json\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"enableAsync\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"threadPoolExecutor\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"threadExecutor\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- 事件驱动执行时使用的线程池, 如果所有状态机都同步执行可以不需要 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"applicationId\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"saga_sample\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"txServiceGroup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"my_test_tx_group\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"threadExecutor\"</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"threadNamePrefix\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"SAGA_ASYNC_EXE_\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"corePoolSize\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"1\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"maxPoolSize\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"20\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Seata Server进行事务恢复时需要通过这个Holder拿到stateMachineEngine实例 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"io.seata.saga.rm.StateMachineEngineHolder\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"stateMachineEngine\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"stateMachineEngine\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></pre>\n<h2>State language referance</h2>\n<h3>&quot;状态机&quot;的属性列表</h3>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">\"Name\"</span>: <span class=\"hljs-string\">\"reduceInventoryAndBalance\"</span>,\n    <span class=\"hljs-attr\">\"Comment\"</span>: <span class=\"hljs-string\">\"reduce inventory then reduce balance in a transaction\"</span>,\n    <span class=\"hljs-attr\">\"StartState\"</span>: <span class=\"hljs-string\">\"ReduceInventory\"</span>,\n    <span class=\"hljs-attr\">\"Version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"States\"</span>: {\n    }\n}\n</code></pre>\n<ul>\n<li>Name: 表示状态机的名称，必须唯一</li>\n<li>Comment: 状态机的描述</li>\n<li>Version: 状态机定义版本</li>\n<li>StartState: 启动时运行的第一个&quot;状态&quot;</li>\n<li>States: 状态列表，是一个map结构，key是&quot;状态&quot;的名称，在状态机内必须唯一, value是一个map结构表示&quot;状态&quot;的属性列表</li>\n</ul>\n<h3>各种&quot;状态&quot;的属性列表</h3>\n<h4>ServiceTask:</h4>\n<pre><code class=\"language-json\">\"States\": {\n    ...\n    \"ReduceBalance\": {\n        \"Type\": \"ServiceTask\",\n        \"ServiceName\": \"balanceAction\",\n        \"ServiceMethod\": \"reduce\",\n        \"CompensateState\": \"CompensateReduceBalance\",\n        \"Input\": [\n            \"$.[businessKey]\",\n            \"$.[amount]\",\n            {\n                \"throwException\" : \"$.[mockReduceBalanceFail]\"\n            }\n        ],\n        \"Output\": {\n            \"compensateReduceBalanceResult\": \"$.#root\"\n        },\n        \"Status\": {\n            \"#root == true\": \"SU\",\n            \"#root == false\": \"FA\",\n            \"$Exception{java.lang.Throwable}\": \"UN\"\n        },\n        \"Catch\": [\n            {\n                \"Exceptions\": [\n                    \"java.lang.Throwable\"\n                ],\n                \"Next\": \"CompensationTrigger\"\n            }\n        ],\n        \"Next\": \"Succeed\"\n    }\n    ...\n}\n</code></pre>\n<ul>\n<li>ServiceName: 服务名称，通常是服务的beanId</li>\n<li>ServiceMethod: 服务方法名称</li>\n<li>CompensateState: 该&quot;状态&quot;的补偿&quot;状态&quot;</li>\n<li>IsForUpdate: 标识该服务会更新数据, 默认是false, 如果配置了CompensateState则默认是true, 有补偿服务的服务肯定是数据更新类服务</li>\n<li>IsPersist: 执行日志是否进行存储, 默认是true, 有一些查询类的服务可以配置在true, 执行日志不进行存储提高性能, 因为当异常恢复时可以重复执行</li>\n<li>Input: 调用服务的输入参数列表, 是一个数组, 对应于服务方法的参数列表, $.表示使用表达式从状态机上下文中取参数，表达使用的<a href=\"https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html\">SpringEL</a>, 如果是常量直接写值即可。复杂的参数如何传入见:</li>\n<li>Ouput: 将服务返回的参数赋值到状态机上下文中, 是一个map结构，key为放入到状态机上文时的key（状态机上下文也是一个map），value中$.是表示SpringEL表达式，表示从服务的返回参数中取值，#root表示服务的整个返回参数</li>\n<li>Status: 服务执行状态映射，框架定义了三个状态，SU 成功、FA 失败、UN 未知, 我们需要把服务执行的状态映射成这三个状态，帮助框架判断整个事务的一致性，是一个map结构，key是条件表达式，一般是取服务的返回值或抛出的异常进行判断，默认是SpringEL表达式判断服务返回参数，带$Exception{开头表示判断异常类型。value是当这个条件表达式成立时则将服务执行状态映射成这个值</li>\n<li>Catch: 捕获到异常后的路由</li>\n<li>Next: 服务执行完成后下一个执行的&quot;状态&quot;</li>\n</ul>\n<blockquote>\n<p>当没有配置Status对服务执行状态进行映射, 系统会自动判断状态:</p>\n<ul>\n<li>没有异常则认为执行成功,</li>\n<li>如果有异常, 则判断异常是不是网路连接超时, 如果是则认为是FA</li>\n<li>如果是其它异常, 服务IsForUpdate=true则状态为UN, 否则为FA</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>整个状态机的执行状态如何判断？是由框架自己判断的：</p>\n<ul>\n<li>如果所有服务执行成功（事务提交成功）则为成功</li>\n<li>如果补偿成功（事务回滚成功）则为FA</li>\n<li>如果有更新类服务未成功且没有进行补偿（事务提交失败） 则为UN</li>\n<li>发生补偿且有未补偿成功的服务（回滚失败）则为UN</li>\n<li>存在事务提交或回滚失败的情况Seata Sever都会不断发起重试</li>\n</ul>\n</blockquote>\n<h4>Choice:</h4>\n<pre><code class=\"language-json\">\"ChoiceState\":{\n    \"Type\": \"Choice\",\n    \"Choices\":[\n        {\n            \"Expression\":\"[reduceInventoryResult] == true\",\n            \"Next\":\"ReduceBalance\"\n        }\n    ],\n    \"Default\":\"Fail\"\n}\n</code></pre>\n<p>Choice类型的&quot;状态&quot;是单项选择路由\nChoices: 可选的分支列表, 只会选择第一个条件成立的分支\nExpression: SpringEL表达式\nNext: 当Expression表达式成立时执行的下一个&quot;状态&quot;</p>\n<h4>Succeed:</h4>\n<pre><code class=\"language-json\">\"Succeed\": {\n    \"Type\":\"Succeed\"\n}\n</code></pre>\n<p>运行到&quot;Succeed状态&quot;表示状态机正常结束, 正常结束不代表成功结束, 是否成功要看每个&quot;状态&quot;是否都成功</p>\n<h4>Fail:</h4>\n<pre><code class=\"language-json\">\"Fail\": {\n    \"Type\":\"Fail\",\n    \"ErrorCode\": \"PURCHASE_FAILED\",\n    \"Message\": \"purchase failed\"\n}\n</code></pre>\n<p>运行到&quot;Fail状态&quot;状态机异常结束, 异常结束时可以配置ErrorCode和Message, 表示错误码和错误信息, 可以用于给调用方返回错误码和消息</p>\n<h4>CompensationTrigger:</h4>\n<pre><code class=\"language-json\">\"CompensationTrigger\": {\n    \"Type\": \"CompensationTrigger\",\n    \"Next\": \"Fail\"\n}\n</code></pre>\n<p>CompensationTrigger类型的state是用于触发补偿事件, 回滚分布式事务\nNext: 补偿成功后路由到的state</p>\n<h4>SubStateMachine:</h4>\n<pre><code class=\"language-json\">\"CallSubStateMachine\": {\n    \"Type\": \"SubStateMachine\",\n    \"StateMachineName\": \"simpleCompensationStateMachine\",\n    \"CompensateState\": \"CompensateSubMachine\",\n    \"Input\": [\n        {\n            \"a\": \"$.1\",\n            \"barThrowException\": \"$.[barThrowException]\",\n            \"fooThrowException\": \"$.[fooThrowException]\",\n            \"compensateFooThrowException\": \"$.[compensateFooThrowException]\"\n        }\n    ],\n    \"Output\": {\n        \"fooResult\": \"$.#root\"\n    },\n    \"Next\": \"Succeed\"\n}\n</code></pre>\n<p>SubStateMachine类型的&quot;状态&quot;是调用子状态机\nStateMachineName: 要调用的子状态机名称\nCompensateState: 子状态机的补偿state, 可以不配置, 系统会自动创建它的补偿state, 子状态机的补偿实际就是调用子状态机的compensate方法, 所以用户并不需要自己实现一个对子状态机的补偿服务。当配置这个属性时, 可以里利用Input属性自定义传入一些变量, 见下面的CompensateSubMachine</p>\n<h4>CompensateSubMachine:</h4>\n<pre><code class=\"language-json\">\"CompensateSubMachine\": {\n    \"Type\": \"CompensateSubMachine\",\n    \"Input\": [\n        {\n            \"compensateFooThrowException\": \"$.[compensateFooThrowException]\"\n        }\n    ]\n}\n</code></pre>\n<p>CompensateSubMachine类型的state是专门用于补偿一个子状态机的state，它会调用子状态机的compensate方法，可以利用Input属性传入一些自定义的变量, Status属性自定判断补偿是否成功</p>\n<h4>复杂参数的Input定义</h4>\n<pre><code class=\"language-json\">\"FirstState\": {\n    \"Type\": \"ServiceTask\",\n    \"ServiceName\": \"demoService\",\n    \"ServiceMethod\": \"complexParameterMethod\",\n    \"Next\": \"ChoiceState\",\n    \"ParameterTypes\" : [\"java.lang.String\", \"int\", \"io.seata.saga.engine.mock.DemoService$People\", \"[Lio.seata.saga.engine.mock.DemoService$People;\", \"java.util.List\", \"java.util.Map\"],\n    \"Input\": [\n        \"$.[people].name\",\n        \"$.[people].age\",\n        {\n            \"name\": \"$.[people].name\",\n            \"age\": \"$.[people].age\",\n            \"childrenArray\": [\n                {\n                    \"name\": \"$.[people].name\",\n                    \"age\": \"$.[people].age\"\n                },\n                {\n                    \"name\": \"$.[people].name\",\n                    \"age\": \"$.[people].age\"\n                }\n            ],\n            \"childrenList\": [\n                {\n                    \"name\": \"$.[people].name\",\n                    \"age\": \"$.[people].age\"\n                },\n                {\n                    \"name\": \"$.[people].name\",\n                    \"age\": \"$.[people].age\"\n                }\n            ],\n            \"childrenMap\": {\n                \"lilei\": {\n                    \"name\": \"$.[people].name\",\n                    \"age\": \"$.[people].age\"\n                }\n            }\n        },\n        [\n            {\n                \"name\": \"$.[people].name\",\n                \"age\": \"$.[people].age\"\n            },\n            {\n                \"name\": \"$.[people].name\",\n                \"age\": \"$.[people].age\"\n            }\n        ],\n        [\n            {\n                \"@type\": \"io.seata.saga.engine.mock.DemoService$People\",\n                \"name\": \"$.[people].name\",\n                \"age\": \"$.[people].age\"\n            }\n        ],\n        {\n            \"lilei\": {\n                \"@type\": \"io.seata.saga.engine.mock.DemoService$People\",\n                \"name\": \"$.[people].name\",\n                \"age\": \"$.[people].age\"\n            }\n        }\n    ],\n    \"Output\": {\n        \"complexParameterMethodResult\": \"$.#root\"\n    }\n}\n</code></pre>\n<p>上面的complexParameterMethod方法定义如下:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\">People <span class=\"hljs-title\">complexParameterMethod</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age, People people, People[] peopleArrya, List&lt;People&gt; peopleList, Map&lt;String, People&gt; peopleMap)</span>\n\nclass People </span>{\n\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>    age;\n\n    <span class=\"hljs-keyword\">private</span> People[] childrenArray;\n    <span class=\"hljs-keyword\">private</span> List&lt;People&gt; childrenList;\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, People&gt; childrenMap;\n\n    ...\n}\n</code></pre>\n<p>启动状态机时传入参数:</p>\n<pre><code class=\"language-java\">Map&lt;String, Object&gt; paramMap = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;(<span class=\"hljs-number\">1</span>);\nPeople people = <span class=\"hljs-keyword\">new</span> People();\npeople.setName(<span class=\"hljs-string\">\"lilei\"</span>);\npeople.setAge(<span class=\"hljs-number\">18</span>);\nparamMap.put(<span class=\"hljs-string\">\"people\"</span>, people);\nString stateMachineName = <span class=\"hljs-string\">\"simpleStateMachineWithComplexParams\"</span>;\nStateMachineInstance inst = stateMachineEngine.start(stateMachineName, <span class=\"hljs-keyword\">null</span>, paramMap);\n</code></pre>\n<blockquote>\n<p>注意ParameterTypes属性是可以不用传的，调用的方法的参数列表中有Map, List这种可以带泛型的集合类型, 因为java编译会丢失泛型, 所以需要用这个属性, 同时在Input的json中对应的对这个json加&quot;@type&quot;来申明泛型(集合的元素类型)</p>\n</blockquote>\n",
  "link": "/zh-cn/docs/user/saga.html",
  "meta": {}
}